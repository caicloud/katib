// Code generated by protoc-gen-go. DO NOT EDIT.
// source: advisor.proto

/*
Package api_v1_alpha3 is a generated protocol buffer package.

It is generated from these files:
	advisor.proto

It has these top-level messages:
	GetAdvisorSuggestionsRequest
	GetAdvisorSuggestionsReply
	Experiment
	ExperimentSpec
	ParameterSpecs
	AlgorithmSpec
	AlgorithmSetting
	ParameterSpec
	FeasibleSpace
	ObjectiveSpec
	Trial
	TrialSpec
	ParameterAssignments
	ParameterAssignment
	TrialStatus
	Observation
	Metric
*/
package api_v1_alpha3

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParameterType int32

const (
	ParameterType_UNKNOWN_TYPE ParameterType = 0
	ParameterType_DOUBLE       ParameterType = 1
	ParameterType_INT          ParameterType = 2
	ParameterType_DISCRETE     ParameterType = 3
	ParameterType_CATEGORICAL  ParameterType = 4
)

var ParameterType_name = map[int32]string{
	0: "UNKNOWN_TYPE",
	1: "DOUBLE",
	2: "INT",
	3: "DISCRETE",
	4: "CATEGORICAL",
}
var ParameterType_value = map[string]int32{
	"UNKNOWN_TYPE": 0,
	"DOUBLE":       1,
	"INT":          2,
	"DISCRETE":     3,
	"CATEGORICAL":  4,
}

func (x ParameterType) String() string {
	return proto.EnumName(ParameterType_name, int32(x))
}
func (ParameterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ObjectiveType int32

const (
	ObjectiveType_UNKNOWN  ObjectiveType = 0
	ObjectiveType_MINIMIZE ObjectiveType = 1
	ObjectiveType_MAXIMIZE ObjectiveType = 2
)

var ObjectiveType_name = map[int32]string{
	0: "UNKNOWN",
	1: "MINIMIZE",
	2: "MAXIMIZE",
}
var ObjectiveType_value = map[string]int32{
	"UNKNOWN":  0,
	"MINIMIZE": 1,
	"MAXIMIZE": 2,
}

func (x ObjectiveType) String() string {
	return proto.EnumName(ObjectiveType_name, int32(x))
}
func (ObjectiveType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetAdvisorSuggestionsRequest struct {
	Experiment    *Experiment `protobuf:"bytes,1,opt,name=experiment" json:"experiment,omitempty"`
	Trials        []*Trial    `protobuf:"bytes,2,rep,name=trials" json:"trials,omitempty"`
	RequestNumber int32       `protobuf:"varint,3,opt,name=request_number,json=requestNumber" json:"request_number,omitempty"`
}

func (m *GetAdvisorSuggestionsRequest) Reset()                    { *m = GetAdvisorSuggestionsRequest{} }
func (m *GetAdvisorSuggestionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAdvisorSuggestionsRequest) ProtoMessage()               {}
func (*GetAdvisorSuggestionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetAdvisorSuggestionsRequest) GetExperiment() *Experiment {
	if m != nil {
		return m.Experiment
	}
	return nil
}

func (m *GetAdvisorSuggestionsRequest) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

func (m *GetAdvisorSuggestionsRequest) GetRequestNumber() int32 {
	if m != nil {
		return m.RequestNumber
	}
	return 0
}

type GetAdvisorSuggestionsReply struct {
	Trials []*Trial `protobuf:"bytes,1,rep,name=trials" json:"trials,omitempty"`
}

func (m *GetAdvisorSuggestionsReply) Reset()                    { *m = GetAdvisorSuggestionsReply{} }
func (m *GetAdvisorSuggestionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetAdvisorSuggestionsReply) ProtoMessage()               {}
func (*GetAdvisorSuggestionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetAdvisorSuggestionsReply) GetTrials() []*Trial {
	if m != nil {
		return m.Trials
	}
	return nil
}

type Experiment struct {
	Name           string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ExperimentSpec *ExperimentSpec `protobuf:"bytes,2,opt,name=experiment_spec,json=experimentSpec" json:"experiment_spec,omitempty"`
}

func (m *Experiment) Reset()                    { *m = Experiment{} }
func (m *Experiment) String() string            { return proto.CompactTextString(m) }
func (*Experiment) ProtoMessage()               {}
func (*Experiment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Experiment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Experiment) GetExperimentSpec() *ExperimentSpec {
	if m != nil {
		return m.ExperimentSpec
	}
	return nil
}

type ExperimentSpec struct {
	Algorithm      *AlgorithmSpec  `protobuf:"bytes,3,opt,name=algorithm" json:"algorithm,omitempty"`
	ParameterSpecs *ParameterSpecs `protobuf:"bytes,1,opt,name=parameter_specs,json=parameterSpecs" json:"parameter_specs,omitempty"`
	Objective      *ObjectiveSpec  `protobuf:"bytes,2,opt,name=objective" json:"objective,omitempty"`
}

func (m *ExperimentSpec) Reset()                    { *m = ExperimentSpec{} }
func (m *ExperimentSpec) String() string            { return proto.CompactTextString(m) }
func (*ExperimentSpec) ProtoMessage()               {}
func (*ExperimentSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ExperimentSpec) GetAlgorithm() *AlgorithmSpec {
	if m != nil {
		return m.Algorithm
	}
	return nil
}

func (m *ExperimentSpec) GetParameterSpecs() *ParameterSpecs {
	if m != nil {
		return m.ParameterSpecs
	}
	return nil
}

func (m *ExperimentSpec) GetObjective() *ObjectiveSpec {
	if m != nil {
		return m.Objective
	}
	return nil
}

type ParameterSpecs struct {
	Parameters []*ParameterSpec `protobuf:"bytes,1,rep,name=parameters" json:"parameters,omitempty"`
}

func (m *ParameterSpecs) Reset()                    { *m = ParameterSpecs{} }
func (m *ParameterSpecs) String() string            { return proto.CompactTextString(m) }
func (*ParameterSpecs) ProtoMessage()               {}
func (*ParameterSpecs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ParameterSpecs) GetParameters() []*ParameterSpec {
	if m != nil {
		return m.Parameters
	}
	return nil
}

type AlgorithmSpec struct {
	AlgorithmName    string              `protobuf:"bytes,1,opt,name=algorithm_name,json=algorithmName" json:"algorithm_name,omitempty"`
	AlgorithmSetting []*AlgorithmSetting `protobuf:"bytes,2,rep,name=algorithm_setting,json=algorithmSetting" json:"algorithm_setting,omitempty"`
}

func (m *AlgorithmSpec) Reset()                    { *m = AlgorithmSpec{} }
func (m *AlgorithmSpec) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSpec) ProtoMessage()               {}
func (*AlgorithmSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AlgorithmSpec) GetAlgorithmName() string {
	if m != nil {
		return m.AlgorithmName
	}
	return ""
}

func (m *AlgorithmSpec) GetAlgorithmSetting() []*AlgorithmSetting {
	if m != nil {
		return m.AlgorithmSetting
	}
	return nil
}

type AlgorithmSetting struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *AlgorithmSetting) Reset()                    { *m = AlgorithmSetting{} }
func (m *AlgorithmSetting) String() string            { return proto.CompactTextString(m) }
func (*AlgorithmSetting) ProtoMessage()               {}
func (*AlgorithmSetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AlgorithmSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AlgorithmSetting) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ParameterSpec struct {
	Name          string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ParameterType ParameterType  `protobuf:"varint,2,opt,name=parameter_type,json=parameterType,enum=api.v1.alpha3.ParameterType" json:"parameter_type,omitempty"`
	FeasibleSpace *FeasibleSpace `protobuf:"bytes,3,opt,name=feasible_space,json=feasibleSpace" json:"feasible_space,omitempty"`
}

func (m *ParameterSpec) Reset()                    { *m = ParameterSpec{} }
func (m *ParameterSpec) String() string            { return proto.CompactTextString(m) }
func (*ParameterSpec) ProtoMessage()               {}
func (*ParameterSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ParameterSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterSpec) GetParameterType() ParameterType {
	if m != nil {
		return m.ParameterType
	}
	return ParameterType_UNKNOWN_TYPE
}

func (m *ParameterSpec) GetFeasibleSpace() *FeasibleSpace {
	if m != nil {
		return m.FeasibleSpace
	}
	return nil
}

type FeasibleSpace struct {
	Max  string   `protobuf:"bytes,1,opt,name=max" json:"max,omitempty"`
	Min  string   `protobuf:"bytes,2,opt,name=min" json:"min,omitempty"`
	List []string `protobuf:"bytes,3,rep,name=list" json:"list,omitempty"`
	Step string   `protobuf:"bytes,4,opt,name=step" json:"step,omitempty"`
}

func (m *FeasibleSpace) Reset()                    { *m = FeasibleSpace{} }
func (m *FeasibleSpace) String() string            { return proto.CompactTextString(m) }
func (*FeasibleSpace) ProtoMessage()               {}
func (*FeasibleSpace) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FeasibleSpace) GetMax() string {
	if m != nil {
		return m.Max
	}
	return ""
}

func (m *FeasibleSpace) GetMin() string {
	if m != nil {
		return m.Min
	}
	return ""
}

func (m *FeasibleSpace) GetList() []string {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *FeasibleSpace) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

type ObjectiveSpec struct {
	Type                ObjectiveType `protobuf:"varint,1,opt,name=type,enum=api.v1.alpha3.ObjectiveType" json:"type,omitempty"`
	Goal                float64       `protobuf:"fixed64,2,opt,name=goal" json:"goal,omitempty"`
	ObjectiveMetricName string        `protobuf:"bytes,3,opt,name=objective_metric_name,json=objectiveMetricName" json:"objective_metric_name,omitempty"`
}

func (m *ObjectiveSpec) Reset()                    { *m = ObjectiveSpec{} }
func (m *ObjectiveSpec) String() string            { return proto.CompactTextString(m) }
func (*ObjectiveSpec) ProtoMessage()               {}
func (*ObjectiveSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ObjectiveSpec) GetType() ObjectiveType {
	if m != nil {
		return m.Type
	}
	return ObjectiveType_UNKNOWN
}

func (m *ObjectiveSpec) GetGoal() float64 {
	if m != nil {
		return m.Goal
	}
	return 0
}

func (m *ObjectiveSpec) GetObjectiveMetricName() string {
	if m != nil {
		return m.ObjectiveMetricName
	}
	return ""
}

type Trial struct {
	Name   string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Spec   *TrialSpec   `protobuf:"bytes,2,opt,name=spec" json:"spec,omitempty"`
	Status *TrialStatus `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *Trial) Reset()                    { *m = Trial{} }
func (m *Trial) String() string            { return proto.CompactTextString(m) }
func (*Trial) ProtoMessage()               {}
func (*Trial) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Trial) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Trial) GetSpec() *TrialSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Trial) GetStatus() *TrialStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type TrialSpec struct {
	ParameterAssignments *ParameterAssignments `protobuf:"bytes,2,opt,name=parameter_assignments,json=parameterAssignments" json:"parameter_assignments,omitempty"`
	RunSpec              string                `protobuf:"bytes,3,opt,name=run_spec,json=runSpec" json:"run_spec,omitempty"`
}

func (m *TrialSpec) Reset()                    { *m = TrialSpec{} }
func (m *TrialSpec) String() string            { return proto.CompactTextString(m) }
func (*TrialSpec) ProtoMessage()               {}
func (*TrialSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *TrialSpec) GetParameterAssignments() *ParameterAssignments {
	if m != nil {
		return m.ParameterAssignments
	}
	return nil
}

func (m *TrialSpec) GetRunSpec() string {
	if m != nil {
		return m.RunSpec
	}
	return ""
}

type ParameterAssignments struct {
	Assignments []*ParameterAssignment `protobuf:"bytes,1,rep,name=assignments" json:"assignments,omitempty"`
}

func (m *ParameterAssignments) Reset()                    { *m = ParameterAssignments{} }
func (m *ParameterAssignments) String() string            { return proto.CompactTextString(m) }
func (*ParameterAssignments) ProtoMessage()               {}
func (*ParameterAssignments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ParameterAssignments) GetAssignments() []*ParameterAssignment {
	if m != nil {
		return m.Assignments
	}
	return nil
}

type ParameterAssignment struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ParameterAssignment) Reset()                    { *m = ParameterAssignment{} }
func (m *ParameterAssignment) String() string            { return proto.CompactTextString(m) }
func (*ParameterAssignment) ProtoMessage()               {}
func (*ParameterAssignment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ParameterAssignment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ParameterAssignment) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type TrialStatus struct {
	Observation *Observation `protobuf:"bytes,4,opt,name=observation" json:"observation,omitempty"`
}

func (m *TrialStatus) Reset()                    { *m = TrialStatus{} }
func (m *TrialStatus) String() string            { return proto.CompactTextString(m) }
func (*TrialStatus) ProtoMessage()               {}
func (*TrialStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TrialStatus) GetObservation() *Observation {
	if m != nil {
		return m.Observation
	}
	return nil
}

type Observation struct {
	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *Observation) Reset()                    { *m = Observation{} }
func (m *Observation) String() string            { return proto.CompactTextString(m) }
func (*Observation) ProtoMessage()               {}
func (*Observation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Observation) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Metric struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Metric) Reset()                    { *m = Metric{} }
func (m *Metric) String() string            { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()               {}
func (*Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAdvisorSuggestionsRequest)(nil), "api.v1.alpha3.GetAdvisorSuggestionsRequest")
	proto.RegisterType((*GetAdvisorSuggestionsReply)(nil), "api.v1.alpha3.GetAdvisorSuggestionsReply")
	proto.RegisterType((*Experiment)(nil), "api.v1.alpha3.Experiment")
	proto.RegisterType((*ExperimentSpec)(nil), "api.v1.alpha3.ExperimentSpec")
	proto.RegisterType((*ParameterSpecs)(nil), "api.v1.alpha3.ParameterSpecs")
	proto.RegisterType((*AlgorithmSpec)(nil), "api.v1.alpha3.AlgorithmSpec")
	proto.RegisterType((*AlgorithmSetting)(nil), "api.v1.alpha3.AlgorithmSetting")
	proto.RegisterType((*ParameterSpec)(nil), "api.v1.alpha3.ParameterSpec")
	proto.RegisterType((*FeasibleSpace)(nil), "api.v1.alpha3.FeasibleSpace")
	proto.RegisterType((*ObjectiveSpec)(nil), "api.v1.alpha3.ObjectiveSpec")
	proto.RegisterType((*Trial)(nil), "api.v1.alpha3.Trial")
	proto.RegisterType((*TrialSpec)(nil), "api.v1.alpha3.TrialSpec")
	proto.RegisterType((*ParameterAssignments)(nil), "api.v1.alpha3.ParameterAssignments")
	proto.RegisterType((*ParameterAssignment)(nil), "api.v1.alpha3.ParameterAssignment")
	proto.RegisterType((*TrialStatus)(nil), "api.v1.alpha3.TrialStatus")
	proto.RegisterType((*Observation)(nil), "api.v1.alpha3.Observation")
	proto.RegisterType((*Metric)(nil), "api.v1.alpha3.Metric")
	proto.RegisterEnum("api.v1.alpha3.ParameterType", ParameterType_name, ParameterType_value)
	proto.RegisterEnum("api.v1.alpha3.ObjectiveType", ObjectiveType_name, ObjectiveType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdvisorSuggestion service

type AdvisorSuggestionClient interface {
	GetSuggestions(ctx context.Context, in *GetAdvisorSuggestionsRequest, opts ...grpc.CallOption) (*GetAdvisorSuggestionsReply, error)
}

type advisorSuggestionClient struct {
	cc *grpc.ClientConn
}

func NewAdvisorSuggestionClient(cc *grpc.ClientConn) AdvisorSuggestionClient {
	return &advisorSuggestionClient{cc}
}

func (c *advisorSuggestionClient) GetSuggestions(ctx context.Context, in *GetAdvisorSuggestionsRequest, opts ...grpc.CallOption) (*GetAdvisorSuggestionsReply, error) {
	out := new(GetAdvisorSuggestionsReply)
	err := grpc.Invoke(ctx, "/api.v1.alpha3.AdvisorSuggestion/GetSuggestions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdvisorSuggestion service

type AdvisorSuggestionServer interface {
	GetSuggestions(context.Context, *GetAdvisorSuggestionsRequest) (*GetAdvisorSuggestionsReply, error)
}

func RegisterAdvisorSuggestionServer(s *grpc.Server, srv AdvisorSuggestionServer) {
	s.RegisterService(&_AdvisorSuggestion_serviceDesc, srv)
}

func _AdvisorSuggestion_GetSuggestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdvisorSuggestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvisorSuggestionServer).GetSuggestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.alpha3.AdvisorSuggestion/GetSuggestions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvisorSuggestionServer).GetSuggestions(ctx, req.(*GetAdvisorSuggestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdvisorSuggestion_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.alpha3.AdvisorSuggestion",
	HandlerType: (*AdvisorSuggestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSuggestions",
			Handler:    _AdvisorSuggestion_GetSuggestions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advisor.proto",
}

func init() { proto.RegisterFile("advisor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 863 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xae, 0x62, 0xc7, 0x69, 0x8e, 0x2a, 0x57, 0x65, 0x13, 0xc0, 0x0d, 0x32, 0x2c, 0xe0, 0x30,
	0x20, 0xeb, 0x0a, 0x67, 0x73, 0x6f, 0xb6, 0x21, 0xd8, 0xe0, 0x25, 0x6e, 0xe0, 0x35, 0x91, 0x0b,
	0xc6, 0xc1, 0xba, 0x1f, 0xc0, 0xa0, 0x3d, 0x56, 0xd1, 0x20, 0x4b, 0x9c, 0x48, 0x1b, 0xcd, 0x45,
	0x81, 0x5d, 0xec, 0x66, 0x0f, 0xb3, 0x3d, 0xcb, 0x1e, 0x69, 0x20, 0x29, 0xeb, 0xaf, 0x72, 0x9b,
	0xde, 0x91, 0xe7, 0x7c, 0xfc, 0x78, 0xbe, 0xf3, 0x43, 0x09, 0x1c, 0xfa, 0xdb, 0x32, 0x10, 0x71,
	0xd2, 0xe5, 0x49, 0x2c, 0x63, 0xe4, 0x50, 0x1e, 0x74, 0x97, 0x5f, 0x76, 0x69, 0xc8, 0xaf, 0xe9,
	0xd3, 0xbd, 0x7d, 0x3f, 0x8e, 0xfd, 0x90, 0x1d, 0x51, 0x1e, 0x1c, 0xd1, 0x28, 0x8a, 0x25, 0x95,
	0x41, 0x1c, 0x09, 0x03, 0xc6, 0xff, 0x5a, 0xb0, 0x7f, 0xc6, 0x64, 0xdf, 0x30, 0x5c, 0x2e, 0x7c,
	0x9f, 0x09, 0xed, 0x27, 0xec, 0x8f, 0x05, 0x13, 0x12, 0x7d, 0x0d, 0xc0, 0x5e, 0x73, 0x96, 0x04,
	0x73, 0x16, 0xc9, 0x8e, 0x75, 0x60, 0x1d, 0xda, 0xbd, 0x47, 0xdd, 0xd2, 0x15, 0xdd, 0x41, 0x06,
	0x20, 0x05, 0x30, 0x7a, 0x02, 0x2d, 0x99, 0x04, 0x34, 0x14, 0x9d, 0x8d, 0x83, 0xc6, 0xa1, 0xdd,
	0xdb, 0xa9, 0x1c, 0x1b, 0x2b, 0x27, 0x49, 0x31, 0xe8, 0x53, 0x68, 0x27, 0xe6, 0xce, 0x49, 0xb4,
	0x98, 0x4f, 0x59, 0xd2, 0x69, 0x1c, 0x58, 0x87, 0x9b, 0xc4, 0x49, 0xad, 0x9e, 0x36, 0xe2, 0x1f,
	0x60, 0x6f, 0x4d, 0xbc, 0x3c, 0xbc, 0x29, 0x5c, 0x69, 0xbd, 0xff, 0x4a, 0x7c, 0x0d, 0x90, 0x87,
	0x8e, 0x10, 0x34, 0x23, 0x3a, 0x67, 0x5a, 0xe3, 0x36, 0xd1, 0x6b, 0xf4, 0x0c, 0xee, 0xe7, 0x82,
	0x26, 0x82, 0xb3, 0x59, 0x67, 0x43, 0xa7, 0xe0, 0xa3, 0xb5, 0x29, 0xb8, 0xe4, 0x6c, 0x46, 0xda,
	0xac, 0xb4, 0xc7, 0xff, 0x59, 0xd0, 0x2e, 0x43, 0xd0, 0x37, 0xb0, 0x4d, 0x43, 0x3f, 0x4e, 0x02,
	0x79, 0x3d, 0xd7, 0x52, 0xed, 0xde, 0x7e, 0x85, 0xb4, 0xbf, 0xf2, 0x6b, 0xce, 0x1c, 0xae, 0xc2,
	0xe2, 0x34, 0xa1, 0x73, 0x26, 0x59, 0xa2, 0xa3, 0x12, 0x69, 0x65, 0xaa, 0x61, 0xbd, 0x58, 0xa1,
	0x14, 0x83, 0x20, 0x6d, 0x5e, 0xda, 0xab, 0x18, 0xe2, 0xe9, 0xef, 0x6c, 0x26, 0x83, 0x25, 0x4b,
	0x85, 0x55, 0x63, 0x18, 0xad, 0xfc, 0x26, 0x86, 0x0c, 0x8e, 0x3d, 0x68, 0x97, 0xd9, 0xd1, 0x31,
	0x40, 0xc6, 0xbf, 0x2a, 0xc0, 0xfe, 0xbb, 0x02, 0x22, 0x05, 0x3c, 0xfe, 0xcb, 0x02, 0xa7, 0x24,
	0x58, 0x75, 0x44, 0x26, 0x79, 0x52, 0x28, 0x8d, 0x93, 0x59, 0x3d, 0x55, 0xa3, 0x73, 0x78, 0x90,
	0xc3, 0x04, 0x93, 0x32, 0x88, 0xfc, 0xb4, 0xe3, 0x3e, 0x5e, 0x9b, 0x50, 0x03, 0x23, 0x2e, 0xad,
	0x58, 0xf0, 0x31, 0xb8, 0x55, 0x54, 0x6d, 0x67, 0xec, 0xc0, 0xe6, 0x92, 0x86, 0x0b, 0x93, 0xb6,
	0x6d, 0x62, 0x36, 0xf8, 0x1f, 0x0b, 0x9c, 0x92, 0xc4, 0xda, 0xb3, 0x27, 0x90, 0x17, 0x62, 0x22,
	0x6f, 0xb8, 0x21, 0x69, 0xaf, 0x4f, 0xd6, 0xf8, 0x86, 0x33, 0xe2, 0xf0, 0xe2, 0x56, 0x91, 0xbc,
	0x62, 0x54, 0x04, 0xd3, 0x90, 0x4d, 0x04, 0xa7, 0x33, 0xb6, 0xa6, 0x89, 0x9e, 0xa5, 0xa0, 0x4b,
	0x85, 0x21, 0xce, 0xab, 0xe2, 0x16, 0xff, 0x02, 0x4e, 0xc9, 0x8f, 0x5c, 0x68, 0xcc, 0xe9, 0xeb,
	0x34, 0x5a, 0xb5, 0xd4, 0x96, 0x20, 0x4a, 0x65, 0xaa, 0xa5, 0x92, 0x14, 0x06, 0x42, 0x76, 0x1a,
	0x07, 0x0d, 0x25, 0x49, 0xad, 0x95, 0x4d, 0x48, 0xc6, 0x3b, 0x4d, 0x23, 0x53, 0xad, 0xf1, 0xdf,
	0x16, 0x38, 0xa5, 0xf6, 0x41, 0x5f, 0x40, 0x53, 0xcb, 0xb5, 0x6a, 0xe5, 0x66, 0x58, 0x2d, 0x57,
	0x23, 0x15, 0xaf, 0x1f, 0xd3, 0x50, 0x5f, 0x6f, 0x11, 0xbd, 0x46, 0x3d, 0xd8, 0xcd, 0xda, 0x70,
	0x32, 0x67, 0x32, 0x09, 0x66, 0xa6, 0x3d, 0x1a, 0xfa, 0xf2, 0x87, 0x99, 0xf3, 0x42, 0xfb, 0x54,
	0x93, 0xe0, 0x37, 0xb0, 0xa9, 0x67, 0xbf, 0xb6, 0x1e, 0x4f, 0xa0, 0x59, 0x18, 0xed, 0x4e, 0xdd,
	0x9b, 0xa1, 0xdb, 0x55, 0xa3, 0x50, 0x0f, 0x5a, 0x42, 0x52, 0xb9, 0x10, 0x69, 0xc2, 0xf7, 0x6a,
	0xf1, 0x1a, 0x41, 0x52, 0x24, 0xfe, 0xd3, 0x82, 0xed, 0x8c, 0x07, 0xbd, 0x84, 0xdd, 0xbc, 0xfe,
	0x54, 0x88, 0xc0, 0x8f, 0xd4, 0xb3, 0x20, 0xd2, 0x00, 0x3e, 0x59, 0xd7, 0x06, 0xfd, 0x1c, 0x4a,
	0x76, 0x78, 0x8d, 0x15, 0x3d, 0x82, 0xbb, 0xc9, 0x22, 0x32, 0x0f, 0x95, 0xc9, 0xc6, 0x56, 0xb2,
	0x88, 0xf4, 0x13, 0xf4, 0x2b, 0xec, 0xd4, 0x11, 0xa1, 0x53, 0xb0, 0x8b, 0x21, 0x98, 0xb1, 0xc5,
	0xef, 0x0f, 0x81, 0x14, 0x8f, 0xe1, 0xef, 0xe0, 0x61, 0x0d, 0xe6, 0x03, 0x26, 0xe7, 0x39, 0xd8,
	0x85, 0xc4, 0xa1, 0x63, 0xb0, 0xe3, 0xa9, 0x60, 0xc9, 0x52, 0x7f, 0xad, 0x74, 0x5b, 0xbd, 0x9d,
	0xe9, 0x51, 0x8e, 0x20, 0x45, 0x38, 0xfe, 0x16, 0xec, 0x82, 0x0f, 0x1d, 0xc1, 0x96, 0x69, 0x93,
	0x95, 0xbc, 0xdd, 0x0a, 0x91, 0x69, 0x14, 0xb2, 0x42, 0xe1, 0x1e, 0xb4, 0x8c, 0xe9, 0xf6, 0x02,
	0x1e, 0x5f, 0x15, 0x26, 0x5f, 0x0f, 0xa8, 0x0b, 0xf7, 0xae, 0xbc, 0xe7, 0xde, 0xe8, 0x47, 0x6f,
	0x32, 0xfe, 0xe9, 0xc5, 0xc0, 0xbd, 0x83, 0x00, 0x5a, 0xa7, 0xa3, 0xab, 0xef, 0xcf, 0x07, 0xae,
	0x85, 0xb6, 0xa0, 0x31, 0xf4, 0xc6, 0xee, 0x06, 0xba, 0x07, 0x77, 0x4f, 0x87, 0x97, 0x27, 0x64,
	0x30, 0x1e, 0xb8, 0x0d, 0x74, 0x1f, 0xec, 0x93, 0xfe, 0x78, 0x70, 0x36, 0x22, 0xc3, 0x93, 0xfe,
	0xb9, 0xdb, 0x7c, 0xfc, 0x55, 0x61, 0x86, 0x34, 0xad, 0x0d, 0x5b, 0x29, 0xad, 0x7b, 0x47, 0x1d,
	0xbe, 0x18, 0x7a, 0xc3, 0x8b, 0xe1, 0xcf, 0x8a, 0x53, 0xed, 0xfa, 0x2f, 0xcd, 0x6e, 0xa3, 0xf7,
	0x06, 0x1e, 0xbc, 0xf5, 0x99, 0x44, 0xd7, 0xd0, 0x3e, 0x63, 0xb2, 0xf0, 0xdd, 0x44, 0x9f, 0x57,
	0x72, 0xf1, 0xae, 0xbf, 0x81, 0xbd, 0xcf, 0x6e, 0x07, 0xe6, 0xe1, 0xcd, 0xb4, 0xa5, 0x7f, 0x30,
	0x9e, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x90, 0xe9, 0xa6, 0x9e, 0x08, 0x00, 0x00,
}
